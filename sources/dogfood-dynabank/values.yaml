# DynaBank Complete Application Configuration
# This Helm chart deploys the complete DynaBank demo including:
# - Infrastructure: MariaDB, Redis, Kafka, Zookeeper
# - Core Banking: Apache Fineract with initialization
# - Services: Transaction API, Fraud Service, Notification Service
# - Frontend: React Web Portal
# - Networking: Ingress controllers and load balancing

global:
  # Container registry settings
  imageRegistry: us-east1-docker.pkg.dev/dogfood-cx/registryrepository
  imagePullPolicy: Always

  # Namespace configuration
  namespace: dynabank

  # Common labels applied to all resources
  labels:
    app.kubernetes.io/part-of: dynabank
    team: platform

  # Resource limits (can be overridden per component)
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Environment settings
environment: development  # development, staging, production

# Component enablement flags - set to false to disable specific components
components:
  # Infrastructure Components
  namespace: false
  mariadb: true
  redis: true
  kafka: true
  zookeeper: false

  # Core Banking
  fineract: true
  fineractInit: true

  # Application Services
  transactionApi: true
  fraudService: true
  notificationService: true

  # Frontend
  webPortal: true

  # Networking
  ingress: false

  # Monitoring (optional)
  monitoring: false

# Namespace Configuration
namespace:
  create: true
  name: dynabank
  labels:
    name: dynabank
    app: dynabank-demo

# MariaDB Configuration
mariadb:
  name: fineractmysql
  image:
    repository: mariadb
    tag: "11.4"
  auth:
    rootPassword: mysql
    database: fineract_tenants
    username: root
  persistence:
    enabled: false
    size: 5Gi
    storageClass: ""
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  service:
    port: 3306
  serviceAccount:
    name: ""  # defaults to fineractmysql-sa
    annotations: {}

# Redis Configuration
redis:
  name: redis
  image:
    repository: redis
    tag: "7-alpine"
  config:
    maxmemory: "256mb"
    maxmemoryPolicy: "allkeys-lru"
  persistence:
    enabled: false
    size: 1Gi
    storageClass: ""
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  service:
    port: 6379
  serviceAccount:
    name: ""  # defaults to redis-sa
    annotations: {}

# Kafka Configuration
kafka:
  name: kafka
  image:
    repository: bitnamilegacy/kafka
    tag: "3.8.1"
  env:
    # Bitnami specific settings
    BITNAMI_DEBUG: "yes"
    ALLOW_PLAINTEXT_LISTENER: "yes"
    # KRaft mode configuration
    KAFKA_ENABLE_KRAFT: "yes"
    KAFKA_CFG_NODE_ID: "0"
    KAFKA_CFG_PROCESS_ROLES: "broker,controller"
    KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
    KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
    KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
    KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
    KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@localhost:9093"
    KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
    KAFKA_KRAFT_CLUSTER_ID: "LelM2dIFQkiUFvXCEcqRWA"
    # Additional settings for stability
    KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    KAFKA_CFG_LOG_RETENTION_HOURS: "168"
    KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  topics:
    - "fineract.transactions"
    - "fraud.scores"
    - "notifications.queue"
    - "audit.trail"
  persistence:
    enabled: false
    size: 2Gi
    storageClass: ""
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  service:
    port: 9092
  serviceAccount:
    name: ""  # defaults to kafka-sa
    annotations: {}

# Zookeeper Configuration (for Kafka)
zookeeper:
  name: zookeeper
  image:
    repository: bitnami/zookeeper
    tag: "3.9.2"
  env:
    ALLOW_ANONYMOUS_LOGIN: "yes"
  persistence:
    enabled: false
    size: 1Gi
    storageClass: ""
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"
  service:
    port: 2181

# Apache Fineract Configuration
fineract:
  name: fineract-server
  image:
    repository: us-east1-docker.pkg.dev/dogfood-cx/registryrepository/fineract
    tag: "latest"
  replicaCount: 1
  env:
    FINERACT_NODE_ID: "1"
    FINERACT_HIKARI_DRIVER_CLASS_NAME: "org.mariadb.jdbc.Driver"
    FINERACT_HIKARI_JDBC_URL: "jdbc:mariadb://fineractmysql:3306/fineract_tenants"
    FINERACT_HIKARI_USERNAME: "root"
    FINERACT_HIKARI_PASSWORD: "mysql"
    FINERACT_DEFAULT_TENANTDB_HOSTNAME: "fineractmysql"
    FINERACT_DEFAULT_TENANTDB_PORT: "3306"
    FINERACT_DEFAULT_TENANTDB_UID: "root"
    FINERACT_DEFAULT_TENANTDB_PWD: "mysql"
    FINERACT_DEFAULT_TENANTDB_CONN_PARAMS: ""
    JAVA_TOOL_OPTIONS: "-Xmx1536m"
    FINERACT_SERVER_PORT: "8080"
    FINERACT_SERVER_SSL_ENABLED: "false"
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "2"
  service:
    port: 8080
    targetPort: 8080
  healthCheck:
    enabled: true
    path: "/fineract-provider/actuator/health"
    initialDelaySeconds: 180
    periodSeconds: 30
  serviceAccount:
    name: ""  # defaults to fineract-server-sa
    annotations: {}

# Fineract Initialization Job
fineractInit:
  name: fineract-init-job
  image:
    repository: curlimages/curl
    tag: "8.1.2"
  env: {}
  backoffLimit: 3
  activeDeadlineSeconds: 900

# Transaction API Configuration
transactionApi:
  name: transaction-api
  image:
    repository: us-east1-docker.pkg.dev/dogfood-cx/registryrepository/dynabank/transaction-api
    tag: "latest"
  replicaCount: 2
  env:
    PORT: "3000"
    LOG_LEVEL: "info"
    LOG_FORMAT: "json"
    FINERACT_URL: "http://fineract-server:8080"
    FINERACT_USERNAME: "mifos"
    FINERACT_PASSWORD: "password"
    FINERACT_TIMEOUT: "30"
    REDIS_URL: "redis:6379"
    REDIS_PASSWORD: ""
    REDIS_DB: "0"
    KAFKA_BROKERS: "kafka:9092"
    KAFKA_TOPIC_TRANSACTIONS: "fineract.transactions"
    KAFKA_TOPIC_FRAUD_SCORES: "fraud.scores"
    KAFKA_TOPIC_NOTIFICATIONS: "notifications.queue"
    KAFKA_TOPIC_AUDIT_TRAIL: "audit.trail"
    FRAUD_SERVICE_URL: "http://fraud-service:8000"
    FRAUD_SERVICE_TIMEOUT: "10"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  service:
    http:
      port: 3000
      targetPort: 3000
    metrics:
      port: 9090
      targetPort: 9090
  healthCheck:
    liveness:
      path: "/system/health/live"
      initialDelaySeconds: 30
      periodSeconds: 10
    readiness:
      path: "/system/health/ready"
      initialDelaySeconds: 5
      periodSeconds: 5
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  serviceAccount:
    name: ""  # defaults to transaction-api-sa
    annotations: {}

# Fraud Service Configuration
fraudService:
  name: fraud-service
  image:
    repository: us-east1-docker.pkg.dev/dogfood-cx/registryrepository/dynabank/fraud-service
    tag: "latest"
  replicaCount: 2
  env:
    PORT: "8000"
    LOG_LEVEL: "INFO"
    REDIS_URL: "redis:6379"
    KAFKA_BROKERS: "kafka:9092"
    KAFKA_TOPIC_FRAUD_SCORES: "fraud.scores"
    MODEL_VERSION: "1.0"
    FRAUD_THRESHOLD_LOW: "0.3"
    FRAUD_THRESHOLD_HIGH: "0.7"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  service:
    port: 8000
    targetPort: 8000
  healthCheck:
    liveness:
      path: "/health"
      initialDelaySeconds: 30
      periodSeconds: 10
    readiness:
      path: "/ready"
      initialDelaySeconds: 5
      periodSeconds: 5
  serviceAccount:
    name: ""  # defaults to fraud-service-sa
    annotations: {}

# Notification Service Configuration
notificationService:
  name: notification-service
  image:
    repository: us-east1-docker.pkg.dev/dogfood-cx/registryrepository/dynabank/notification-service
    tag: "latest"
  replicaCount: 2
  env:
    PORT: "8080"
    LOG_LEVEL: "info"
    KAFKA_BROKERS: "kafka:9092"
    KAFKA_TOPIC_NOTIFICATIONS: "notifications.queue"
    KAFKA_GROUP_ID: "notification-service"
    REDIS_URL: "redis:6379"
    EMAIL_SMTP_HOST: "smtp.example.com"
    EMAIL_SMTP_PORT: "587"
    EMAIL_FROM: "noreply@dynabank.demo"
    SMS_PROVIDER: "twilio"
    WEBSOCKET_ENABLED: "true"
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  service:
    http:
      port: 8080
      targetPort: 8080
    websocket:
      port: 8081
      targetPort: 8081
  healthCheck:
    liveness:
      path: "/health"
      initialDelaySeconds: 30
      periodSeconds: 10
    readiness:
      path: "/ready"
      initialDelaySeconds: 5
      periodSeconds: 5
  serviceAccount:
    name: ""  # defaults to notification-service-sa
    annotations: {}

# Web Portal Configuration
webPortal:
  name: web-portal
  image:
    repository: us-east1-docker.pkg.dev/dogfood-cx/registryrepository/dynabank/web-portal
    tag: "latest"
  replicaCount: 2
  env:
    PORT: "3000"
    NODE_ENV: "production"
    REACT_APP_API_URL: "http://transaction-api:3000"
    REACT_APP_WS_URL: "ws://notification-service:8081"
    REACT_APP_ENVIRONMENT: "development"
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  service:
    port: 3000
    targetPort: 3000
  healthCheck:
    liveness:
      path: "/"
      initialDelaySeconds: 10
      periodSeconds: 30
    readiness:
      path: "/"
      initialDelaySeconds: 5
      periodSeconds: 10
  serviceAccount:
    name: ""  # defaults to web-portal-sa
    annotations: {}

# Ingress Configuration
ingress:
  enabled: true
  className: alb
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  host: dynabank.local
  tls:
    enabled: false
    secretName: dynabank-tls
  rules:
    - host: dynabank.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: web-portal
            port: 3000
        - path: /api
          pathType: Prefix
          service:
            name: transaction-api
            port: 3000
        - path: /fraud
          pathType: Prefix
          service:
            name: fraud-service
            port: 8000
        - path: /notifications
          pathType: Prefix
          service:
            name: notification-service
            port: 8080

# Monitoring Configuration (optional)
monitoring:
  prometheus:
    enabled: false
    namespace: monitoring
  grafana:
    enabled: false
    namespace: monitoring
  jaeger:
    enabled: false
    namespace: monitoring

# Security Configuration
security:
  networkPolicies:
    enabled: false
  podSecurityStandards:
    enabled: true
    profile: restricted
  rbac:
    create: true

# Persistence Configuration
persistence:
  storageClass: ""
  accessMode: ReadWriteOnce
{{- if .Values.components.kafka }}
# Use Bitnami Kafka with KRaft mode (no Zookeeper required)
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.kafka.name }}
  namespace: {{ include "dynabank.namespace" . }}
  labels:
    {{- include "dynabank.labels" . | nindent 4 }}
    app.kubernetes.io/component: messaging
spec:
  type: ClusterIP
  ports:
  - name: kafka
    port: {{ .Values.kafka.service.port }}
    targetPort: kafka
    protocol: TCP
  selector:
    {{- include "dynabank.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: messaging
---
{{- if .Values.kafka.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.kafka.name }}-pvc
  namespace: {{ include "dynabank.namespace" . }}
  labels:
    {{- include "dynabank.labels" . | nindent 4 }}
    app.kubernetes.io/component: messaging
spec:
  accessModes:
    - {{ .Values.persistence.accessMode }}
  {{- if .Values.kafka.persistence.storageClass }}
  storageClassName: {{ .Values.kafka.persistence.storageClass }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.kafka.persistence.size }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafka.name }}
  namespace: {{ include "dynabank.namespace" . }}
  labels:
    {{- include "dynabank.labels" . | nindent 4 }}
    app.kubernetes.io/component: messaging
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "dynabank.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: messaging
  template:
    metadata:
      labels:
        {{- include "dynabank.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: messaging
    spec:
      containers:
      - name: kafka
        image: {{ include "dynabank.image" .Values.kafka }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - name: kafka
          containerPort: 9092
          protocol: TCP
        - name: controller
          containerPort: 9093
          protocol: TCP
        env:
        {{- range $key, $value := .Values.kafka.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        startupProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # 30 * 10 = 300 seconds max startup time
        livenessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          {{- include "dynabank.resources" .Values.kafka | nindent 10 }}
        {{- if .Values.kafka.persistence.enabled }}
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        {{- end }}
      {{- if .Values.kafka.persistence.enabled }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.kafka.name }}-pvc
      {{- end }}
---
# Kafka Topics Creation Job
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.kafka.name }}-topics
  namespace: {{ include "dynabank.namespace" . }}
  labels:
    {{- include "dynabank.labels" . | nindent 4 }}
    app.kubernetes.io/component: messaging
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        {{- include "dynabank.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: messaging-setup
    spec:
      restartPolicy: Never
      containers:
      - name: kafka-topics
        image: {{ include "dynabank.image" .Values.kafka }}
        command:
        - /bin/bash
        - -c
        - |
          # Wait for Kafka to be ready
          echo "Waiting for Kafka to be ready..."
          until kafka-topics.sh --bootstrap-server {{ .Values.kafka.name }}:{{ .Values.kafka.service.port }} --list; do
            echo "Kafka not ready, sleeping..."
            sleep 5
          done

          echo "Kafka is ready, creating topics..."
          {{- range .Values.kafka.topics }}
          kafka-topics.sh --bootstrap-server {{ $.Values.kafka.name }}:{{ $.Values.kafka.service.port }} \
            --create --if-not-exists --topic {{ . }} \
            --partitions 3 --replication-factor 1 || true
          echo "Created topic: {{ . }}"
          {{- end }}

          echo "All topics created successfully!"
{{- end }}
# Default values for managementplane.
# This is a YAML-formatted file.

# Required. Image configurations for the operator component.
image:
  # Required. Image registry from where download the operator image.
  registry: containers.dl.tetrate.io
  # Required. Operator image tag
  tag: 1.9.1

# Optional. The Management Plane CR spec and the name to use for the ManagementPlane CR.
# If no dataStore is specified, by default embeddedPostgres is deployed.
# managementPlaneName: managementplane
# spec:
#   dataStore:
#     postgres:
#       address: <postgres-endpoint>:5432
#       name: tsb
#   telemetryStore:
#     elastic:
#       port: 9200
#       version: 7
#   tokenIssuer:
#     jwt:
#       expiration: 1h

# Optional. All the passwords or certs used by TSB components.
# All of them will be saved in k8s secrets.
# secrets:
#   # Passwords and certificates related to TSB platform
#   tsb:
#     # Password for admin user
#     adminPassword:
#
#     # The TLS certificate that TSB will use to encrypt traffic exposed via the front envoy.
#     # This can be omitted if a CA certificate is provided in the field `cacert` due to it will be generated along with
#     # the certificate key.
#     #
#     cert:
#
#     # The TLS certificate key that TSB will use to encrypt traffic exposed via the front envoy.
#     # This can be omitted if a CA certificate is provided in the field `cacert` due to it will be generated along with
#     # the certificate key.
#     #
#     key:
#
#   # Passwords and certificates related to the Postgres database
#   postgres:
#     # The username to access the Postgres database
#     username: <username>
#
#     # The password to access the Postgres database
#     password: <password>
#
#     # If the Postgres database requires TLS encrypted traffic, place here the CA certificate used to sign
#     # the exposed TLS certificate.
#     #
#     cacert: <place your ca cert here>
#
#   # Passwords and certificates related to Elasticsearch
#   elasticsearch:
#     # The username to access Elasticsearch
#     username: <username>
#
#     # The password to access Elasticsearch
#     password: <password>
#
#     # If Elasticsearch requires TLS encrypted traffic, place here the CA certificate used to sign the
#     # exposed TLS certificate.
#     #
#     cacert: <place your cert here>
#
#   # Passwords and certificates related to LDAP
#   # This is required in case LDAP is enabled as identity provider in the Management Plane spec.
#   # Check `spec.identityProvider.ldap` section of your configuration.
#   #
#   ldap:
#     binddn: <define>
#     bindpassword: <define>
#     cacert: <cert>
#
#   # Secret keys related to the OIDC Provider
#   #
#   oidc:
#     clientSecret: <place the client secret here>
#     deviceClientSecret: <place the device client secret here>
#
#   # Secret keys related to Azure OIDC
#   #
#   azure:
#     clientSecret: <place the client secret here>
#
#   # TLS certs configuration to configure XCP Central component TLS.
#   xcp:
#     # Enabling this will require the below `rootca` and `rootcakey` options in order to generate the XCP Central and
#     # MPC certificates.
#     # This also requires cert-manager already installed.
#     autoGenerateCerts: false
#
#     # The root CA cert will be the root for the generated certs if `xcp.autoGenerateCerts` is enabled. Else it must be
#     # the CA used to generate the central cert (in case of selfsigned certs), so other components like MPC can use it
#     # to verify XCP Central cert (`secrets.xcp.central.cert`).
#     rootca: <place your ca cert here>
#     # root CA key is only required is `xcp.autoGenerateCerts` is enabled, so MPC and Central certs will be generated
#     # using the root CA and the below provided key.
#     rootcakey: <place your ca key here>
#
#     central:
#       # The TLS certificate that XCP will use to encrypt traffic exposed via the front envoy.
#       cert:
#       # The TLS certificate key that XCP will use to encrypt traffic exposed via the front envoy.
#       key:

# Optional. If `xcp.autoGenerateCerts` is enabled, also cert-manager is required.
# This chart will create cluster issuers with secrets into the cert-manager cluster resource namespace.
# The below configuration allows to specify the value of this namespace (defaults to `cert-manager`).
#
# certManager:
#   clusterResourcesNamespace: cert-manager

# Optional. Operator configurations to extend the default one.
# operator:
#   deployment:
#     # Pod affinity configuration
#     affinity: {}
#     # Extra deployment annotations.
#     annotations: []
#     # Extra environment variables to add to the operator pod
#     env: []
#     # Extra pod annotations.
#     podAnnotations: []
#     # The num of replicas of the operator deployment.
#     replicaCount: 1
#     # The deployment strategy to use to replace existing pods with new ones.
#     strategy: {}
#     # The tolerations the operator pod is attached to.
#     tolerations: []
#
#   service:
#     # Extra service annotations.
#     annotations: []
#
#   serviceAccount:
#     # Extra service account annotations.
#     annotations: []
#     # Name of secrets where credentials can be found to pull image from registries requiring authentication.
#     imagePullSecrets: []
#
#   # pullSecret is a Docker config JSON to be stored in a secret to be used as an image pull secret. If this secret is provided,
#   # it will be included in the operator service account as reference.
#   # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-by-providing-credentials-on-the-command-line
#   pullSecret: ""
#
#   # pullUsername and pullPassword will be used along the provided image registry to generate a Docker config JSON that
#   # will be stored as a pull secret.
#   pullUsername: ""
#   pullPassword: ""

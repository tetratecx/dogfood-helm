{{- $secrets := default dict .Values.secrets}}
{{- if $secrets.postgres }}
{{- $oldSecret := lookup "v1" "Secret" .Release.Namespace "postgres-credentials" }}
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{ include "common.labels" . | indent 4 }}
  annotations:
{{ include "common.secrets.keep" . | indent 4}}
type: Opaque
data:
{{- /* if the secret already exists this operation is an upgrade.
In case of upgrade we don't want to generate a new embedded password.
In case it does exist because older versions didn't generate one, and we detect it's a demo installation (no postgres data provided in the spec)
let's use the old default password. */}}
{{- if $oldSecret }}
{{- $oldDemoPassword:= ternary ("tsb-postgres-password" | b64enc ) "" (not (((.Values).spec).dataStore).postgres) }}
{{- $embeddedPassword := default $oldDemoPassword (include "getPostgresPasswordFromSecret" $oldSecret) }}
  embedded-postgres-password: {{ $embeddedPassword }}
{{- $password := default ($embeddedPassword | b64dec ) $secrets.postgres.password }}
  config.yaml: {{ include "secret.postgres.config" (merge . (dict "randomOrProvidedPostgresPassword" $password)) | b64enc | quote }}
  .pg_service.conf: {{ include "secret.postgres.pg_service" (merge . (dict "randomOrProvidedPostgresPassword" $password "embeddedPassword" $embeddedPassword)) | b64enc | quote }}
{{- else }}
{{- /* if the secret doesn't exists and no password is set we generated a new random password for the embedded postgres. */}}
{{- $password := default (randAlphaNum 16) $secrets.postgres.password  -}}
{{- if not (((.Values).spec).dataStore).postgres }}
  embedded-postgres-password: {{ $password | b64enc | quote }}
{{- end}}
  config.yaml: {{ include "secret.postgres.config" (merge . (dict "randomOrProvidedPostgresPassword" $password)) | b64enc | quote }}
  .pg_service.conf: {{ include "secret.postgres.pg_service" (merge . (dict "randomOrProvidedPostgresPassword" $password "embeddedPassword" $password)) | b64enc | quote }}
{{- end }}

{{- /* TLS certs */}}
{{- if $secrets.postgres.cacert }}
  root.crt: {{ $secrets.postgres.cacert | b64enc | quote }}
{{- end }}
{{- if $secrets.postgres.clientcert }}
  client.crt: {{ $secrets.postgres.clientcert | b64enc |quote }}
{{- end }}
{{- if $secrets.postgres.clientkey }}
  client.key: {{ $secrets.postgres.clientkey | b64enc | quote }}
{{- end }}
{{- end }}

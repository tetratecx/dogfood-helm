{{- $secrets := default dict .Values.secrets }}
{{- $tsbsecrets := default dict $secrets.tsb }}
{{- $tsesecrets := default dict $secrets.tse }}
{{- $flavor := default "TSB" (.Values.spec).flavor }}
Thank you for installing the {{ $flavor }} Management plane {{ .Chart.AppVersion }}.
Chart: {{ .Chart.Name }}
Version: {{ .Chart.Version }}

{{ if .Values.spec -}}
{{ if eq $flavor "TSB" -}}
Your Management Plane is ready to be used.{{ if not .Values.secrets }} It's assumed that you manually provided the required secrets.{{ end }}
Next step might be to onboard the cluster from the control plane.
You could choose between:
 - install `controlplane` chart
 - manually following # TODO url to docs.
{{ end }}
# Discover the {{ $flavor }} entrypoint

Check the IP for the envoy loadbalancer service.

This is one example. Consider a time for the service to be ready:
{{- $address := ternary "hostname" "ip" ( eq $flavor "TSE" ) }}
ADDRESS=$(kubectl get svc -n {{ .Release.Namespace | quote }} envoy --output jsonpath='{.status.loadBalancer.ingress[0].{{ $address }}}')

{{- $adminUser := ternary "tse" "admin" ( eq $flavor "TSE" ) }}
{{- $adminPass := default "<admin pass>" ( ternary $tsesecrets.password $tsbsecrets.adminPassword ( eq $flavor "TSE" )) }}

# Configure the TCTL {{ $adminUser }} profile, using the address from the previous step.

{{ $profile := ternary "tse" "helm" ( eq $flavor "TSE" ) -}}
# Setup the {{ $flavor}} address as follows:
{{- if eq $flavor "TSB" }}
# If specific settings are needed to trust the certificate configured in TSB, refer to the
# `tctl config clusters set --help` command to see all the available options.
{{- end }}
{{- if eq $flavor "TSE" }}
kubectl get -n {{ .Release.Namespace | quote }} secret tsb-cert-issuer-ca -o jsonpath='{.data.ca\.crt}' | base64 -d > ~/.tctl/tse-root-ca.pem
{{- end }}
tctl config clusters set {{ $profile }} --bridge-address $ADDRESS:{{ default "8443" (((.Values.spec).components).frontEnvoy).port }}
{{- ternary " --tls-custom-ca-file ~/.tctl/tse-root-ca.pem" "" ( eq $flavor "TSE" ) }}

tctl config users set {{ $profile }} --username {{ $adminUser }} --password {{ $adminPass | quote }} --org {{ .Values.spec.organization | quote }}
{{- ternary " --tenant \"tse\"" "" ( eq $flavor "TSE" ) }}
tctl config profiles set {{ $profile }} --cluster {{ $profile }} --username {{ $profile }}
tctl config profiles set-current {{ $profile }}
{{ else -}}
Your Management Plane operator is ready to be used.
Next step might be to create the Management Plane resource into the cluster.
{{ end -}}

{{ if eq $flavor "TSE" }}
{{- if eq (default "" $tsesecrets.password) "tse" }}
WARNING: The default "tse" password is used. For production usage this should be changed by
configuring `.secrets.tse.password`.
{{ end -}}

{{- $postgresSecrets := default dict $secrets.postgres }}
{{- if eq (default "" $postgresSecrets.password) "" }}
WARNING: Postgres password was not provided in the helm values.
Autogenerated postgres password is stored in the kubernetes secret "postgres-credentials".
{{ end -}}
{{ end -}}

{{- $secrets := default dict .Values.secrets}}
{{- if $secrets.elasticsearch }}
{{- $oldSecret := lookup "v1" "Secret" .Release.Namespace "elastic-credentials" }}
apiVersion: v1
kind: Secret
metadata:
  name: elastic-credentials
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{ include "common.labels" . | indent 4 }}
  annotations:
{{ include "common.secrets.keep" . | indent 4 }}
type: Opaque
data:
  username: {{ required "secrets.elasticsearch.username" $secrets.elasticsearch.username | b64enc | quote }}
{{- /* if the secret already exists this operation is an upgrade.
In case of upgrade we don't want to generate a new embedded password.
In case it does exist because older versions didn't generate one, and we detect it's a demo installation (no telemetry data provided in the spec)
let's use the old default password. */}}
{{- if $oldSecret }}
{{- $oldDemoPassword:= ternary ("tsb-elastic-password" | b64enc ) "" (not (((.Values).spec).telemetryStore).elastic) }}
{{- $embeddedPassword := default $oldDemoPassword (include "getElasticSearchPasswordFromSecret" $oldSecret) }}
  password: {{ $embeddedPassword }}
{{- else }}
{{- /* if the secret doesn't exists and no password is set we generated a new random password for the embedded elasticsearch. */}}
{{- $password := default (randAlphaNum 16) $secrets.elasticsearch.password }}
  password: {{ $password | b64enc | quote }}
{{- end }}
  roles: {{ "tsb-elastic-oap-role" | b64enc }}
{{- if $secrets.elasticsearch.cacert }}
---
apiVersion: v1
kind: Secret
metadata:
  name: es-certs
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{ include "common.labels" . | indent 4 }}
  annotations:
{{ include "common.secrets.keep" . | indent 4}}
type: Opaque
data:
  ca.crt: {{ $secrets.elasticsearch.cacert | b64enc | quote }}
{{- end }}
{{- end }}
